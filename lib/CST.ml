(* Generated by ocaml-tree-sitter. *)
(*
   ruby grammar

   entrypoint: program
*)

open! Sexplib.Conv
open Tree_sitter_run

type splat_star = Token.t

type hash_splat_star_star = Token.t

type string_content = Token.t

type anon_choice_PLUSEQ_6a24756 = [
    `PLUSEQ of Token.t (* "+=" *)
  | `DASHEQ of Token.t (* "-=" *)
  | `STAREQ of Token.t (* "*=" *)
  | `STARSTAREQ of Token.t (* "**=" *)
  | `SLASHEQ of Token.t (* "/=" *)
  | `BARBAREQ of Token.t (* "||=" *)
  | `BAREQ of Token.t (* "|=" *)
  | `AMPAMPEQ of Token.t (* "&&=" *)
  | `AMPEQ of Token.t (* "&=" *)
  | `PERCEQ of Token.t (* "%=" *)
  | `GTGTEQ of Token.t (* ">>=" *)
  | `LTLTEQ of Token.t (* "<<=" *)
  | `HATEQ of Token.t (* "^=" *)
]

type heredoc_end = Token.t

type unary_minus = Token.t

type complex = Token.t (* pattern (\d+)?(\+|-)?(\d+)i *)

type identifier = Token.t

type character =
  Token.t (* pattern \?(\\\S({[0-9A-Fa-f]*}|[0-9A-Fa-f]*|-\S([MC]-\S)?)?|\S) *)

type binary_star = Token.t

type string_start = Token.t

type anon_choice_BANG_b88b9c5 = [
    `BANG of Token.t (* "!" *)
  | `TILDE of Token.t (* "~" *)
]

type hash_key_symbol = Token.t

type anon_choice_DOT_5431c66 = [
    `DOT of Token.t (* "." *)
  | `AMPDOT of Token.t (* "&." *)
]

type constant = Token.t

type float_ =
  Token.t (* pattern \d(_?\d)*(\.\d)?(_?\d)*([eE][\+-]?\d(_?\d)*\
  )? *)

type integer =
  Token.t (* pattern 0[bB][01](_?[01])*|0[oO]?[0-7](_?[0-7])*|(0[dD])?\d(_?\d)*|0[xX][0-9a-fA-F](_?[0-9a-fA-F])* *)

type symbol_array_start = Token.t

type heredoc_beginning = Token.t

type binary_star_star = Token.t

type class_variable = Token.t

type uninterpreted = Token.t (* pattern (.|\s)* *)

type string_array_start = Token.t

type escape_sequence = Token.t

type imm_tok_colon = Token.t (* ":" *)

type element_reference_bracket = Token.t

type operator = [
    `DOTDOT of Token.t (* ".." *)
  | `BAR of Token.t (* "|" *)
  | `HAT of Token.t (* "^" *)
  | `AMP of Token.t (* "&" *)
  | `LTEQGT of Token.t (* "<=>" *)
  | `EQEQ of Token.t (* "==" *)
  | `EQEQEQ of Token.t (* "===" *)
  | `EQTILDE of Token.t (* "=~" *)
  | `GT of Token.t (* ">" *)
  | `GTEQ of Token.t (* ">=" *)
  | `LT of Token.t (* "<" *)
  | `LTEQ of Token.t (* "<=" *)
  | `PLUS of Token.t (* "+" *)
  | `DASH of Token.t (* "-" *)
  | `STAR of Token.t (* "*" *)
  | `SLASH of Token.t (* "/" *)
  | `PERC of Token.t (* "%" *)
  | `BANG of Token.t (* "!" *)
  | `BANGTILDE of Token.t (* "!~" *)
  | `STARSTAR of Token.t (* "**" *)
  | `LTLT of Token.t (* "<<" *)
  | `GTGT of Token.t (* ">>" *)
  | `TILDE of Token.t (* "~" *)
  | `PLUSAT of Token.t (* "+@" *)
  | `DASHAT of Token.t (* "-@" *)
  | `LBRACKRBRACK of Token.t (* "[]" *)
  | `LBRACKRBRACKEQ of Token.t (* "[]=" *)
  | `BQUOT of Token.t (* "`" *)
]

type subshell_start = Token.t

type true_ = Token.t

type nil = Token.t

type symbol_start = Token.t

type imm_tok_lpar = Token.t (* "(" *)

type singleton_class_left_angle_left_langle = Token.t

type global_variable =
  Token.t (* pattern "\\$-?(([!@&`'+~=/\\\\,;.<>*$?:\"])|([0-9]*\
  )|([a-zA-Z_][a-zA-Z0-9_]*\
  ))" *)

type heredoc_body_start = Token.t

type string_end = Token.t

type simple_symbol = Token.t

type regex_start = Token.t

type imm_tok_coloncolon = Token.t (* "::" *)

type line_break = Token.t

type pat_3d340f6 = Token.t (* pattern \s+ *)

type block_ampersand = Token.t

type binary_minus = Token.t

type instance_variable = Token.t

type heredoc_content = Token.t

type anon_choice_DOTDOT_ed078ec = [
    `DOTDOT of Token.t (* ".." *)
  | `DOTDOTDOT of Token.t (* "..." *)
]

type false_ = Token.t

type anon_choice_un_minus_157a1bc = [
    `Un_minus of unary_minus (*tok*)
  | `PLUS of Token.t (* "+" *)
]

type anon_choice_int_e7b97da = [
    `Int of integer (*tok*)
  | `Float of float_ (*tok*)
]

type terminator = [
    `Line_brk of line_break (*tok*)
  | `SEMI of Token.t (* ";" *)
]

type variable = [
    `Self of Token.t (* "self" *)
  | `Super of Token.t (* "super" *)
  | `Inst_var of instance_variable (*tok*)
  | `Class_var of class_variable (*tok*)
  | `Global_var of global_variable (*tok*)
  | `Id of identifier (*tok*)
  | `Cst of constant (*tok*)
]

type anon_choice_call_fd54051 = [
    `Call of call
  | `Choice_var of anon_choice_var_18b08b3
]

and anon_choice_cst_c1a97cb = [
    `Cst of constant (*tok*)
  | `Scope_resol of scope_resolution
]

and anon_choice_else_4cfa13b = [
    `Else of else_
  | `Elsif of (
        Token.t (* "elsif" *)
      * statement
      * anon_choice_term_b9e1843
      * anon_choice_else_4cfa13b option
    )
]

and anon_choice_id_5ca805c = [
    `Id of identifier (*tok*)
  | `Op of operator
  | `Cst of constant (*tok*)
  | `Arg_list of argument_list
]

and anon_choice_lhs_3a98eae = [
    `Lhs of lhs
  | `Rest_assign of (Token.t (* "*" *) * lhs option)
  | `Dest_left_assign of (
        Token.t (* "(" *) * left_assignment_list * Token.t (* ")" *)
    )
]

and anon_choice_lhs_6f12f8f = [
    `Lhs of lhs
  | `Left_assign_list of left_assignment_list
]

and anon_choice_pair_a4f33e2 = [
    `Pair of pair
  | `Hash_splat_arg of hash_splat_argument
]

and anon_choice_term_b9e1843 = [ `Term of terminator | `Then of then_ ]

and anon_choice_var_18b08b3 = [
    `Var of variable
  | `Scope_resol of scope_resolution
]

and anon_formal_param_rep_COMMA_formal_param_fcb57c2 = (
    formal_parameter
  * (Token.t (* "," *) * formal_parameter) list (* zero or more *)
)

and anon_lit_content_rep_pat_3d340f6_lit_content_3d2b44e = (
    literal_contents
  * (pat_3d340f6 * literal_contents) list (* zero or more *)
)

and arg = [
    `Prim of primary
  | `Assign of assignment
  | `Op_assign of (lhs * anon_choice_PLUSEQ_6a24756 * arg)
  | `Cond of (arg * Token.t (* "?" *) * arg * Token.t (* ":" *) * arg)
  | `Range of range
  | `Bin of binary
  | `Un of unary
]

and argument = [
    `Exp of expression
  | `Splat_arg of splat_argument
  | `Hash_splat_arg of hash_splat_argument
  | `Blk_arg of (block_ampersand (*tok*) * arg)
  | `Pair of pair
]

and argument_list = (
    imm_tok_lpar (*tok*)
  * argument_list_with_trailing_comma option
  * Token.t (* ")" *)
)

and argument_list_with_trailing_comma = (
    argument
  * (Token.t (* "," *) * argument) list (* zero or more *)
  * Token.t (* "," *) option
)

and assignment = [
  `Choice_lhs_EQ_choice_arg of (
      anon_choice_lhs_6f12f8f
    * Token.t (* "=" *)
    * [
          `Arg of arg
        | `Splat_arg of splat_argument
        | `Right_assign_list of right_assignment_list
      ]
  )
]

and bare_parameters = (
    simple_formal_parameter
  * (Token.t (* "," *) * formal_parameter) list (* zero or more *)
)

and binary = [
    `Arg_and_arg of (arg * Token.t (* "and" *) * arg)
  | `Arg_or_arg of (arg * Token.t (* "or" *) * arg)
  | `Arg_BARBAR_arg of (arg * Token.t (* "||" *) * arg)
  | `Arg_AMPAMP_arg of (arg * Token.t (* "&&" *) * arg)
  | `Arg_choice_LTLT_arg of (
        arg
      * [ `LTLT of Token.t (* "<<" *) | `GTGT of Token.t (* ">>" *) ]
      * arg
    )
  | `Arg_choice_LT_arg of (
        arg
      * [
            `LT of Token.t (* "<" *)
          | `LTEQ of Token.t (* "<=" *)
          | `GT of Token.t (* ">" *)
          | `GTEQ of Token.t (* ">=" *)
        ]
      * arg
    )
  | `Arg_AMP_arg of (arg * Token.t (* "&" *) * arg)
  | `Arg_choice_HAT_arg of (
        arg
      * [ `HAT of Token.t (* "^" *) | `BAR of Token.t (* "|" *) ]
      * arg
    )
  | `Arg_choice_PLUS_arg of (
        arg
      * [ `PLUS of Token.t (* "+" *) | `Bin_minus of binary_minus (*tok*) ]
      * arg
    )
  | `Arg_choice_SLASH_arg of (
        arg
      * [
            `SLASH of Token.t (* "/" *)
          | `PERC of Token.t (* "%" *)
          | `Bin_star of binary_star (*tok*)
        ]
      * arg
    )
  | `Arg_choice_EQEQ_arg of (
        arg
      * [
            `EQEQ of Token.t (* "==" *)
          | `BANGEQ of Token.t (* "!=" *)
          | `EQEQEQ of Token.t (* "===" *)
          | `LTEQGT of Token.t (* "<=>" *)
          | `EQTILDE of Token.t (* "=~" *)
          | `BANGTILDE of Token.t (* "!~" *)
        ]
      * arg
    )
  | `Arg_bin_star_star_arg of (arg * binary_star_star (*tok*) * arg)
]

and block = (
    Token.t (* "{" *)
  * block_parameters option
  * statements option
  * Token.t (* "}" *)
)

and block_parameters = (
    Token.t (* "|" *)
  * anon_formal_param_rep_COMMA_formal_param_fcb57c2 option
  * Token.t (* "," *) option
  * (
        Token.t (* ";" *)
      * identifier (*tok*)
      * (Token.t (* "," *) * identifier (*tok*)) list (* zero or more *)
    )
      option
  * Token.t (* "|" *)
)

and body_statement = (
    statements option
  * [ `Rescue of rescue | `Else of else_ | `Ensure of ensure ]
      list (* zero or more *)
  * Token.t (* "end" *)
)

and call = (primary * anon_choice_DOT_5431c66 * anon_choice_id_5ca805c)

and call_ = [
    `Choice_call_arg_list of (anon_choice_call_fd54051 * argument_list)
  | `Choice_call_arg_list_blk of (
        anon_choice_call_fd54051 * argument_list * block
    )
  | `Choice_call_arg_list_do_blk of (
        anon_choice_call_fd54051 * argument_list * do_block
    )
  | `Choice_call_blk of (anon_choice_call_fd54051 * block)
  | `Choice_call_do_blk of (anon_choice_call_fd54051 * do_block)
]

and chained_command_call = (
    command_call_with_block * anon_choice_DOT_5431c66
  * anon_choice_id_5ca805c
)

and command_argument_list = (
    argument
  * (Token.t (* "," *) * argument) list (* zero or more *)
)

and command_assignment = [
  `Choice_lhs_EQ_exp of (
      anon_choice_lhs_6f12f8f * Token.t (* "=" *) * expression
  )
]

and command_call_with_block = [
    `Choice_call_cmd_arg_list_blk of (
        anon_choice_call_fd54051 * command_argument_list * block
    )
  | `Choice_call_cmd_arg_list_do_blk of (
        anon_choice_call_fd54051 * command_argument_list * do_block
    )
]

and command_unary = [
    `Defi_exp of (Token.t (* "defined?" *) * expression)
  | `Not_exp of (Token.t (* "not" *) * expression)
  | `Choice_un_minus_exp of (anon_choice_un_minus_157a1bc * expression)
  | `Choice_BANG_exp of (anon_choice_BANG_b88b9c5 * expression)
]

and delimited_symbol = (
    symbol_start (*tok*)
  * literal_contents option
  * string_end (*tok*)
)

and do_ = (
    [ `Do of Token.t (* "do" *) | `Term of terminator ]
  * statements option
  * Token.t (* "end" *)
)

and do_block = (
    Token.t (* "do" *)
  * terminator option
  * (block_parameters * terminator option) option
  * body_statement
)

and else_ = (Token.t (* "else" *) * terminator option * statements option)

and ensure = (Token.t (* "ensure" *) * statements option)

and exception_variable = (Token.t (* "=>" *) * lhs)

and exceptions = (
    pattern
  * (Token.t (* "," *) * pattern) list (* zero or more *)
)

and expression = [
    `Cmd_bin of (
        expression
      * [ `Or of Token.t (* "or" *) | `And of Token.t (* "and" *) ]
      * expression
    )
  | `Cmd_un of command_unary
  | `Cmd_assign of command_assignment
  | `Cmd_op_assign of (lhs * anon_choice_PLUSEQ_6a24756 * expression)
  | `Cmd_call of (
        [
            `Call of call
          | `Chai_cmd_call of chained_command_call
          | `Choice_var of anon_choice_var_18b08b3
        ]
      * command_argument_list
    )
  | `Cmd_call_with_blk of command_call_with_block
  | `Chai_cmd_call of chained_command_call
  | `Ret_cmd of (Token.t (* "return" *) * command_argument_list)
  | `Yield_cmd of (Token.t (* "yield" *) * command_argument_list)
  | `Brk_cmd of (Token.t (* "break" *) * command_argument_list)
  | `Next_cmd of (Token.t (* "next" *) * command_argument_list)
  | `Arg of arg
]

and formal_parameter = [
    `Simple_formal_param of simple_formal_parameter
  | `Params of parameters
]

and hash_splat_argument = (hash_splat_star_star (*tok*) * arg)

and in_ = (Token.t (* "in" *) * arg)

and interpolation = (
    Token.t (* "#{" *)
  * statement option
  * Token.t (* "}" *)
)

and left_assignment_list = mlhs

and lhs = [
    `Var of variable
  | `True of true_ (*tok*)
  | `False of false_ (*tok*)
  | `Nil of nil (*tok*)
  | `Scope_resol of scope_resolution
  | `Elem_ref of (
        primary
      * element_reference_bracket (*tok*)
      * argument_list_with_trailing_comma option
      * Token.t (* "]" *)
    )
  | `Call of call
  | `Call_ of call_
]

and literal_contents =
  [
      `Str_content of string_content (*tok*)
    | `Interp of interpolation
    | `Esc_seq of escape_sequence (*tok*)
  ]
    list (* one or more *)

and method_name = [
    `Id of identifier (*tok*)
  | `Cst of constant (*tok*)
  | `Setter of (identifier (*tok*) * Token.t (* "=" *))
  | `Simple_symb of simple_symbol (*tok*)
  | `Deli_symb of delimited_symbol
  | `Op of operator
  | `Inst_var of instance_variable (*tok*)
  | `Class_var of class_variable (*tok*)
  | `Global_var of global_variable (*tok*)
]

and method_rest = (
    method_name
  * [
        `Params_opt_term of (parameters * terminator option)
      | `Opt_bare_params_term of (bare_parameters option * terminator)
    ]
  * body_statement
)

and mlhs = (
    anon_choice_lhs_3a98eae
  * (Token.t (* "," *) * anon_choice_lhs_3a98eae) list (* zero or more *)
  * Token.t (* "," *) option
)

and pair = [
    `Arg_EQGT_arg of (arg * Token.t (* "=>" *) * arg)
  | `Choice_hash_key_symb_imm_tok_colon_arg of (
        [
            `Hash_key_symb of hash_key_symbol (*tok*)
          | `Id of identifier (*tok*)
          | `Cst of constant (*tok*)
          | `Str of string_
        ]
      * imm_tok_colon (*tok*)
      * arg
    )
]

and parameters = (
    Token.t (* "(" *)
  * anon_formal_param_rep_COMMA_formal_param_fcb57c2 option
  * Token.t (* ")" *)
)

and parenthesized_statements = (
    Token.t (* "(" *)
  * statements option
  * Token.t (* ")" *)
)

and pattern = [ `Arg of arg | `Splat_arg of splat_argument ]

and primary = [
    `Paren_stmts of parenthesized_statements
  | `Lhs of lhs
  | `Array of (
        Token.t (* "[" *)
      * argument_list_with_trailing_comma option
      * Token.t (* "]" *)
    )
  | `Str_array of (
        string_array_start (*tok*)
      * pat_3d340f6 option
      * anon_lit_content_rep_pat_3d340f6_lit_content_3d2b44e option
      * pat_3d340f6 option
      * string_end (*tok*)
    )
  | `Symb_array of (
        symbol_array_start (*tok*)
      * pat_3d340f6 option
      * anon_lit_content_rep_pat_3d340f6_lit_content_3d2b44e option
      * pat_3d340f6 option
      * string_end (*tok*)
    )
  | `Hash of (
        Token.t (* "{" *)
      * (
            anon_choice_pair_a4f33e2
          * (Token.t (* "," *) * anon_choice_pair_a4f33e2)
              list (* zero or more *)
          * Token.t (* "," *) option
        )
          option
      * Token.t (* "}" *)
    )
  | `Subs of (
        subshell_start (*tok*)
      * literal_contents option
      * string_end (*tok*)
    )
  | `Simple_symb of simple_symbol (*tok*)
  | `Deli_symb of delimited_symbol
  | `Int of integer (*tok*)
  | `Float of float_ (*tok*)
  | `Comp of complex (*tok*)
  | `Rati of (anon_choice_int_e7b97da * Token.t (* "r" *))
  | `Str of string_
  | `Char of character (*tok*)
  | `Chai_str of (string_ * string_ list (* one or more *))
  | `Regex of (
        regex_start (*tok*)
      * literal_contents option
      * string_end (*tok*)
    )
  | `Lambda of (
        Token.t (* "->" *)
      * [ `Params of parameters | `Bare_params of bare_parameters ] option
      * [ `Blk of block | `Do_blk of do_block ]
    )
  | `Meth of (Token.t (* "def" *) * method_rest)
  | `Sing_meth of (
        Token.t (* "def" *)
      * [
            `Var of variable
          | `LPAR_arg_RPAR of (Token.t (* "(" *) * arg * Token.t (* ")" *))
        ]
      * [ `DOT of Token.t (* "." *) | `COLONCOLON of Token.t (* "::" *) ]
      * method_rest
    )
  | `Class of (
        Token.t (* "class" *)
      * anon_choice_cst_c1a97cb
      * superclass option
      * terminator
      * body_statement
    )
  | `Sing_class of (
        Token.t (* "class" *)
      * singleton_class_left_angle_left_langle (*tok*) * arg * terminator
      * body_statement
    )
  | `Module of (
        Token.t (* "module" *)
      * anon_choice_cst_c1a97cb
      * [
            `Term_body_stmt of (terminator * body_statement)
          | `End of Token.t (* "end" *)
        ]
    )
  | `Begin of (Token.t (* "begin" *) * terminator option * body_statement)
  | `While of (Token.t (* "while" *) * statement * do_)
  | `Until of (Token.t (* "until" *) * statement * do_)
  | `If of (
        Token.t (* "if" *)
      * statement
      * anon_choice_term_b9e1843
      * anon_choice_else_4cfa13b option
      * Token.t (* "end" *)
    )
  | `Unless of (
        Token.t (* "unless" *)
      * statement
      * anon_choice_term_b9e1843
      * anon_choice_else_4cfa13b option
      * Token.t (* "end" *)
    )
  | `For of (Token.t (* "for" *) * anon_choice_lhs_6f12f8f * in_ * do_)
  | `Case of (
        Token.t (* "case" *)
      * statement option
      * terminator option
      * when_ list (* zero or more *)
      * else_ option
      * Token.t (* "end" *)
    )
  | `Ret of (Token.t (* "return" *) * argument_list option)
  | `Yield of (Token.t (* "yield" *) * argument_list option)
  | `Brk of (Token.t (* "break" *) * argument_list option)
  | `Next of (Token.t (* "next" *) * argument_list option)
  | `Redo of (Token.t (* "redo" *) * argument_list option)
  | `Retry of (Token.t (* "retry" *) * argument_list option)
  | `Paren_un of (
        [ `Defi of Token.t (* "defined?" *) | `Not of Token.t (* "not" *) ]
      * parenthesized_statements
    )
  | `Un_lit of (anon_choice_un_minus_157a1bc * anon_choice_int_e7b97da)
  | `Here_begin of heredoc_beginning (*tok*)
]

and range = [
    `Arg_choice_DOTDOT_arg of (arg * anon_choice_DOTDOT_ed078ec * arg)
  | `Choice_DOTDOT_arg of (anon_choice_DOTDOT_ed078ec * arg)
  | `Arg_choice_DOTDOT of (arg * anon_choice_DOTDOT_ed078ec)
]

and rescue = (
    Token.t (* "rescue" *)
  * exceptions option
  * exception_variable option
  * anon_choice_term_b9e1843
)

and right_assignment_list = (
    pattern
  * (Token.t (* "," *) * pattern) list (* zero or more *)
)

and scope_resolution = (
    [
        `COLONCOLON of Token.t (* "::" *)
      | `Prim_imm_tok_colo of (primary * imm_tok_coloncolon (*tok*))
    ]
  * [ `Id of identifier (*tok*) | `Cst of constant (*tok*) ]
)

and simple_formal_parameter = [
    `Id of identifier (*tok*)
  | `Splat_param of (Token.t (* "*" *) * identifier (*tok*) option)
  | `Hash_splat_param of (Token.t (* "**" *) * identifier (*tok*) option)
  | `Blk_param of (Token.t (* "&" *) * identifier (*tok*))
  | `Kw_param of (identifier (*tok*) * imm_tok_colon (*tok*) * arg option)
  | `Opt_param of (identifier (*tok*) * Token.t (* "=" *) * arg)
]

and splat_argument = (splat_star (*tok*) * arg)

and statement = [
    `Undef of (
        Token.t (* "undef" *)
      * method_name
      * (Token.t (* "," *) * method_name) list (* zero or more *)
    )
  | `Alias of (Token.t (* "alias" *) * method_name * method_name)
  | `If_modi of (statement * Token.t (* "if" *) * expression)
  | `Unless_modi of (statement * Token.t (* "unless" *) * expression)
  | `While_modi of (statement * Token.t (* "while" *) * expression)
  | `Until_modi of (statement * Token.t (* "until" *) * expression)
  | `Rescue_modi of (statement * Token.t (* "rescue" *) * expression)
  | `Begin_blk of (
        Token.t (* "BEGIN" *)
      * Token.t (* "{" *)
      * statements option
      * Token.t (* "}" *)
    )
  | `End_blk of (
        Token.t (* "END" *)
      * Token.t (* "{" *)
      * statements option
      * Token.t (* "}" *)
    )
  | `Exp of expression
]

and statements = [
    `Rep1_choice_stmt_term_opt_stmt of (
        [
            `Stmt_term of (statement * terminator)
          | `Empty_stmt of Token.t (* ";" *)
        ]
          list (* one or more *)
      * statement option
    )
  | `Stmt of statement
]

and string_ = (
    string_start (*tok*)
  * literal_contents option
  * string_end (*tok*)
)

and superclass = (Token.t (* "<" *) * expression)

and then_ = [
    `Term_stmts of (terminator * statements)
  | `Opt_term_then_opt_stmts of (
        terminator option
      * Token.t (* "then" *)
      * statements option
    )
]

and unary = [
    `Defi_arg of (Token.t (* "defined?" *) * arg)
  | `Not_arg of (Token.t (* "not" *) * arg)
  | `Choice_un_minus_arg of (anon_choice_un_minus_157a1bc * arg)
  | `Choice_BANG_arg of (anon_choice_BANG_b88b9c5 * arg)
]

and when_ = (
    Token.t (* "when" *)
  * pattern
  * (Token.t (* "," *) * pattern) list (* zero or more *)
  * anon_choice_term_b9e1843
)

type program = (
    statements option
  * (Token.t (* "__END__" *) * line_break (*tok*) * uninterpreted (*tok*))
      option
)

type empty_statement (* inlined *) = Token.t (* ";" *)

type comment (* inlined *) = Token.t

type super (* inlined *) = Token.t (* "super" *)

type self (* inlined *) = Token.t (* "self" *)

type old_identifier (* inlined *) = Token.t

type splat_parameter (* inlined *) = (
    Token.t (* "*" *)
  * identifier (*tok*) option
)

type hash_splat_parameter (* inlined *) = (
    Token.t (* "**" *)
  * identifier (*tok*) option
)

type block_parameter (* inlined *) = (Token.t (* "&" *) * identifier (*tok*))

type setter (* inlined *) = (identifier (*tok*) * Token.t (* "=" *))

type unary_literal (* inlined *) = (
    anon_choice_un_minus_157a1bc * anon_choice_int_e7b97da
)

type rational (* inlined *) = (anon_choice_int_e7b97da * Token.t (* "r" *))

type alias (* inlined *) = (
    Token.t (* "alias" *) * method_name * method_name
)

type array_ (* inlined *) = (
    Token.t (* "[" *)
  * argument_list_with_trailing_comma option
  * Token.t (* "]" *)
)

type begin_ (* inlined *) = (
    Token.t (* "begin" *)
  * terminator option
  * body_statement
)

type begin_block (* inlined *) = (
    Token.t (* "BEGIN" *)
  * Token.t (* "{" *)
  * statements option
  * Token.t (* "}" *)
)

type block_argument (* inlined *) = (block_ampersand (*tok*) * arg)

type break (* inlined *) = (Token.t (* "break" *) * argument_list option)

type break_command (* inlined *) = (
    Token.t (* "break" *) * command_argument_list
)

type case (* inlined *) = (
    Token.t (* "case" *)
  * statement option
  * terminator option
  * when_ list (* zero or more *)
  * else_ option
  * Token.t (* "end" *)
)

type chained_string (* inlined *) = (
    string_
  * string_ list (* one or more *)
)

type class_ (* inlined *) = (
    Token.t (* "class" *)
  * anon_choice_cst_c1a97cb
  * superclass option
  * terminator
  * body_statement
)

type command_binary (* inlined *) = (
    expression
  * [ `Or of Token.t (* "or" *) | `And of Token.t (* "and" *) ]
  * expression
)

type command_call (* inlined *) = (
    [
        `Call of call
      | `Chai_cmd_call of chained_command_call
      | `Choice_var of anon_choice_var_18b08b3
    ]
  * command_argument_list
)

type command_operator_assignment (* inlined *) = (
    lhs * anon_choice_PLUSEQ_6a24756 * expression
)

type conditional (* inlined *) = (
    arg * Token.t (* "?" *) * arg * Token.t (* ":" *) * arg
)

type destructured_left_assignment (* inlined *) = (
    Token.t (* "(" *) * left_assignment_list * Token.t (* ")" *)
)

type element_reference (* inlined *) = (
    primary
  * element_reference_bracket (*tok*)
  * argument_list_with_trailing_comma option
  * Token.t (* "]" *)
)

type elsif (* inlined *) = (
    Token.t (* "elsif" *)
  * statement
  * anon_choice_term_b9e1843
  * anon_choice_else_4cfa13b option
)

type end_block (* inlined *) = (
    Token.t (* "END" *)
  * Token.t (* "{" *)
  * statements option
  * Token.t (* "}" *)
)

type for_ (* inlined *) = (
    Token.t (* "for" *) * anon_choice_lhs_6f12f8f * in_ * do_
)

type hash (* inlined *) = (
    Token.t (* "{" *)
  * (
        anon_choice_pair_a4f33e2
      * (Token.t (* "," *) * anon_choice_pair_a4f33e2)
          list (* zero or more *)
      * Token.t (* "," *) option
    )
      option
  * Token.t (* "}" *)
)

type if_ (* inlined *) = (
    Token.t (* "if" *)
  * statement
  * anon_choice_term_b9e1843
  * anon_choice_else_4cfa13b option
  * Token.t (* "end" *)
)

type if_modifier (* inlined *) = (
    statement * Token.t (* "if" *) * expression
)

type keyword_parameter (* inlined *) = (
    identifier (*tok*)
  * imm_tok_colon (*tok*)
  * arg option
)

type lambda (* inlined *) = (
    Token.t (* "->" *)
  * [ `Params of parameters | `Bare_params of bare_parameters ] option
  * [ `Blk of block | `Do_blk of do_block ]
)

type method_ (* inlined *) = (Token.t (* "def" *) * method_rest)

type module_ (* inlined *) = (
    Token.t (* "module" *)
  * anon_choice_cst_c1a97cb
  * [
        `Term_body_stmt of (terminator * body_statement)
      | `End of Token.t (* "end" *)
    ]
)

type next (* inlined *) = (Token.t (* "next" *) * argument_list option)

type next_command (* inlined *) = (
    Token.t (* "next" *) * command_argument_list
)

type operator_assignment (* inlined *) = (
    lhs * anon_choice_PLUSEQ_6a24756 * arg
)

type optional_parameter (* inlined *) = (
    identifier (*tok*) * Token.t (* "=" *) * arg
)

type parenthesized_unary (* inlined *) = (
    [ `Defi of Token.t (* "defined?" *) | `Not of Token.t (* "not" *) ]
  * parenthesized_statements
)

type redo (* inlined *) = (Token.t (* "redo" *) * argument_list option)

type regex (* inlined *) = (
    regex_start (*tok*)
  * literal_contents option
  * string_end (*tok*)
)

type rescue_modifier (* inlined *) = (
    statement * Token.t (* "rescue" *) * expression
)

type rest_assignment (* inlined *) = (Token.t (* "*" *) * lhs option)

type retry (* inlined *) = (Token.t (* "retry" *) * argument_list option)

type return (* inlined *) = (Token.t (* "return" *) * argument_list option)

type return_command (* inlined *) = (
    Token.t (* "return" *) * command_argument_list
)

type singleton_class (* inlined *) = (
    Token.t (* "class" *) * singleton_class_left_angle_left_langle (*tok*)
  * arg * terminator * body_statement
)

type singleton_method (* inlined *) = (
    Token.t (* "def" *)
  * [
        `Var of variable
      | `LPAR_arg_RPAR of (Token.t (* "(" *) * arg * Token.t (* ")" *))
    ]
  * [ `DOT of Token.t (* "." *) | `COLONCOLON of Token.t (* "::" *) ]
  * method_rest
)

type string_array (* inlined *) = (
    string_array_start (*tok*)
  * pat_3d340f6 option
  * anon_lit_content_rep_pat_3d340f6_lit_content_3d2b44e option
  * pat_3d340f6 option
  * string_end (*tok*)
)

type subshell (* inlined *) = (
    subshell_start (*tok*)
  * literal_contents option
  * string_end (*tok*)
)

type symbol_array (* inlined *) = (
    symbol_array_start (*tok*)
  * pat_3d340f6 option
  * anon_lit_content_rep_pat_3d340f6_lit_content_3d2b44e option
  * pat_3d340f6 option
  * string_end (*tok*)
)

type undef (* inlined *) = (
    Token.t (* "undef" *)
  * method_name
  * (Token.t (* "," *) * method_name) list (* zero or more *)
)

type unless (* inlined *) = (
    Token.t (* "unless" *)
  * statement
  * anon_choice_term_b9e1843
  * anon_choice_else_4cfa13b option
  * Token.t (* "end" *)
)

type unless_modifier (* inlined *) = (
    statement * Token.t (* "unless" *) * expression
)

type until (* inlined *) = (Token.t (* "until" *) * statement * do_)

type until_modifier (* inlined *) = (
    statement * Token.t (* "until" *) * expression
)

type while_ (* inlined *) = (Token.t (* "while" *) * statement * do_)

type while_modifier (* inlined *) = (
    statement * Token.t (* "while" *) * expression
)

type yield (* inlined *) = (Token.t (* "yield" *) * argument_list option)

type yield_command (* inlined *) = (
    Token.t (* "yield" *) * command_argument_list
)

type heredoc_body (* inlined *) = (
    heredoc_body_start (*tok*)
  * [
        `Here_content of heredoc_content (*tok*)
      | `Interp of interpolation
      | `Esc_seq of escape_sequence (*tok*)
    ]
      list (* zero or more *)
  * heredoc_end (*tok*)
)
